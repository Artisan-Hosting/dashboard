openapi: 3.0.3
info:
  title: Artisan Hosting Management API
  version: "1.0.0"
  description: |
    This OpenAPI specification describes both the Proxmox-relay VM endpoints and the Management API 
    (nodes, runners, auth, usage) powering the Artisan Hosting dashboard. It integrates details 
    from **doc.md** and **API_Documentation.md**.
servers:
  - url: https://api.artisanhosting.net/v1
    description: Production

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # -------------------------------------------------------------------
    # Generic wrapper used by most endpoints
    # -------------------------------------------------------------------
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, success, error]
        data:
          nullable: true
          description: “The payload (shape varies by endpoint).”
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorItem"
      required:
        - status
        - data
        - errors

    ErrorItem:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          nullable: true

    # -------------------------------------------------------------------
    # VM-related schemas (Proxmox-relay portion)
    # -------------------------------------------------------------------
    VM:
      type: object
      properties:
        vmid:
          type: integer
        name:
          type: string
        status:
          type: string
      required: [vmid, name, status]

    VMStatus:
      type: object
      properties:
        vmid:
          type: integer
        cpu_cores:
          type: integer
        memory_mb:
          type: integer
        disk_read_bytes:
          type: integer
        disk_write_bytes:
          type: integer
        net_rx_bytes:
          type: integer
        net_tx_bytes:
          type: integer
        uptime_seconds:
          type: integer
      required:
        - vmid

    # -------------------------------------------------------------------
    # Node-related schemas
    # -------------------------------------------------------------------
    Node:
      type: object
      properties:
        identity:
          type: object
          properties:
            id:
              type: string
            _signature:
              type: string
        hostname:
          type: string
        status:
          type: string
        ip_address:
          type: string
        runners:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
      required:
        - identity
        - hostname
        - status
        - ip_address

    # If you have a “NodeDetails” that extends Node – e.g. with manager_data –
    # you can do something like this:
    NodeDetails:
      allOf:
        - $ref: '#/components/schemas/Node'
        - type: object
          properties:
            manager_data:
              type: object
              properties:
                identity:
                  type: object
                  properties:
                    id:
                      type: string
                    _signature:
                      type: string
                version:
                  type: object
                  properties:
                    application:
                      type: object
                      properties:
                        number:
                          type: string
                        code:
                          type: string
                    library:
                      type: object
                      properties:
                        number:
                          type: string
                        code:
                          type: string
                gitconfig:
                  type: array
                  items:
                    type: object
                    properties:
                      user:
                        type: string
                      repo:
                        type: string
                      branch:
                        type: string
                      server:
                        type: string
                      token:
                        type: string
                        nullable: true
                hostname:
                  type: string
                ip_address:
                  type: string
                system_apps:
                  type: integer
                client_apps:
                  type: integer
                warning:
                  type: integer
                uptime:
                  type: integer

    # -------------------------------------------------------------------
    # Runner-related schemas
    # -------------------------------------------------------------------
    Runner:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        version:
          type: object
          properties:
            application:
              type: object
              properties:
                number:
                  type: string
                code:
                  type: string
            library:
              type: object
              properties:
                number:
                  type: string
                code:
                  type: string
        nodes:
          type: array
          items:
            type: string
        uptime:
          type: integer
          nullable: true
        started_at:
          type: string
          format: date-time
          nullable: true
      required:
        - name
        - status
        - version

    RunnerInstance:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        version:
          type: object
          properties:
            application:
              type: object
              properties:
                number:
                  type: string
                code:
                  type: string
            library:
              type: object
              properties:
                number:
                  type: string
                code:
                  type: string
        config:
          type: object
          properties:
            cpuLimit:
              type: string
            memoryLimit:
              type: string
            envVars:
              type: object
              additionalProperties:
                type: string
        health:
          type: object
          properties:
            uptime:
              type: integer
            lastCheck:
              type: string
              format: date-time
        logs:
          type: object
          properties:
            recent:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  message:
                    type: string
            log_endpoint:
              type: string
      required: [id, status, version]

paths:
  # -------------------------------------------------------------------
  # Auth (login / refresh)
  # -------------------------------------------------------------------
  /auth/login:
    post:
      summary: Login and obtain JWT tokens
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: [email, password]
      responses:
        "200":
          description: Login succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth:
                    type: string
                  refresh:
                    type: string

  /auth/refresh:
    post:
      summary: Refresh an expired access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expired_token:
                  type: string
                refresh_token:
                  type: string
              required: [expired_token, refresh_token]
      responses:
        "200":
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth:
                    type: string

  # -------------------------------------------------------------------
  # VM (Proxmox-relay)
  # -------------------------------------------------------------------
  /vms:
    get:
      summary: List all VMs registered to the authenticated user
      tags: [VM]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of VMs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/VM"

  /vms/{vmid}/status:
    get:
      summary: Get current metrics and state for a VM
      tags: [VM]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: vmid
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Runtime status for VM
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/VMStatus"

  /vms/{vmid}/{action}:
    post:
      summary: Dispatch an action to a VM (start, stop, reboot, shutdown)
      tags: [VM]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: vmid
          required: true
          schema:
            type: integer
        - in: path
          name: action
          required: true
          schema:
            type: string
            enum: [start, stop, reboot, shutdown]
      responses:
        "200":
          description: Action dispatched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # -------------------------------------------------------------------
  # Node (Management API)
  # -------------------------------------------------------------------
  /nodes:
    get:
      summary: List all nodes
      tags: [Node]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of nodes
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Node"

  /node/{nodeId}:
    get:
      summary: Get node details
      tags: [Node]
      security:
        - bearerAuth: []
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Node details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/NodeDetails"

  /node_reload/{nodeId}:
    get:
      summary: Reload the manager on a node
      tags: [Node]
      security:
        - bearerAuth: []
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Node reloaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # -------------------------------------------------------------------
  # Runner (Management API)
  # -------------------------------------------------------------------
  /runners:
    get:
      summary: List all runners
      tags: [Runner]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of runners
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Runner"

  /runner/{runnerId}:
    get:
      summary: Get runner details
      tags: [Runner]
      security:
        - bearerAuth: []
      parameters:
        - name: runnerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Runner details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Runner"

  /control/{identity}/{command}:
    get:
      summary: Send command to runner (start, stop, restart)
      tags: [RunnerCommand]
      security:
        - bearerAuth: []
      parameters:
        - name: identity
          in: path
          required: true
          schema:
            type: string
        - name: command
          in: path
          required: true
          schema:
            type: string
            enum: [start, stop, restart]
      responses:
        "202":
          description: Command accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"